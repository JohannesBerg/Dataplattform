service: dataplattform-events-slack-app

custom:
  stage: ${opt:stage, self:provider.stage}
  project: Dataplattform-${self:custom.stage}
  slack_command_lambda: ${self:custom.project}-slack_command
  slack_response_lambda: ${self:custom.project}-slack_response
  eventTable: ${self:custom.project}-event_codes
  ingest_apikey: ${ssm:dataplattform_${self:custom.stage}_slack_event_app_ingest_apikey}
  pythonRequirements:
    useDownloadCache: true
    useStaticCache: true

provider:
  name: aws
  stage: dev
  region: eu-central-1
  runtime: python3.7
  memorySize: 1024
  timeout: 5
  stackTags:
    Project: ${self:custom.project}
  tags:
    Project: ${self:custom.project}

package:
  individually: true
  exclude:
    - "./**"

functions:
  slack_command:
    handler: slack_command/slack_command.lambda_handler
    name: ${self:custom.slack_command_lambda}
    description: Slack Command Lambda
    role: slackCommandRole
    layers:
      - arn:aws:lambda:eu-central-1:275823250475:layer:Dataplattform-prod-slack_signature_validator:1
    package:
      include:
        - 'slack_command/*.py'
    environment:
      DATAPLATTFORM_SLACK_SECRET: ${ssm:dataplattform_slack_event_app_secret}
      DATAPLATTFORM_SLACK_RESPONSE_FUNCTION: ${self:custom.slack_response_lambda}
    events:
      - http:
          path: dataplattform_slack_command
          method: post
  slack_response:
    handler: slack_response.handler
    module: slack_response
    name: ${self:custom.slack_response_lambda}
    description: Slack Response Lambda
    role: slackResponseRole
    package:
      include:
        - 'slack_response/*.py'
        - 'slack_response/creds.json'
    environment:
      DATAPLATTFORM_FAGKALENDER_ID: ${ssm:dataplattform_fagkalender_id}
      DATAPLATTFORM_INGEST_URL:
        !Join
        - ''
        - - 'Fn::ImportValue': ${self:custom.project}-ingest-url
          - EventType
      DATAPLATTFORM_INGEST_APIKEY: ${self:custom.ingest_apikey}
      SLACK_BOT_TOKEN: ${ssm:dataplattform_slack_event_oauth}
      DATAPLATTFORM_EVENT_TABLE: ${self:custom.eventTable}

resources:
  Resources:
    slackCommandRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-SlackCommandRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          - PolicyName: ${self:custom.project}-invokeSlackResponsePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                    - "lambda:InvokeAsync"
                  Resource:
                    - arn:aws:lambda:eu-central-1:275823250475:function:${self:custom.slack_response_lambda}
    slackResponseRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-SlackResponseRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          - PolicyName: ${self:custom.project}-readWriteEventDynamoPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:PutItem"
                    - "dynamodb:GetItem"
                    - "dynamodb:Scan"
                    - "dynamodb:Query"
                  Resource:
                    Fn::GetAtt:
                      - EventTable
                      - Arn
    EventTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.eventTable}
        AttributeDefinitions:
          - AttributeName: event_id
            AttributeType: S
        KeySchema:
          - AttributeName: event_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
  Outputs:
    EventTableArn:
      Description: "event code table arn"
      Value:
        Fn::GetAtt:
          - EventTable
          - Arn
      Export:
        Name: ${self:custom.project}-dynamodb-eventtable-arn
    EventTableName:
      Description: "Event table name"
      Value: ${self:custom.eventTable}
      Export:
        Name: ${self:custom.project}-dynamodb-eventtable-name

plugins:
  - serverless-python-requirements
