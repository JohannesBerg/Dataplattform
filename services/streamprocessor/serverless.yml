service: dataplattform-streamprocessor

custom:
  stage: ${opt:stage, self:provider.stage}
  project: Dataplattform-${self:custom.stage}
  streamprocessor_lambda: ${self:custom.project}-streamprocessor
  ####FOR TEST
  insertdb_lambda: ${self:custom.project}-insertdb
  ###########

provider:
  name: aws
  stage: dev
  region: eu-central-1
  deploymentBucket:
    name: dataplattform-deploymentbucket
  runtime: python3.7
  memorySize: 1024
  timeout: 5
  stackTags:
    Project: ${self:custom.project}
  tags:
    Project: ${self:custom.project}

package:
  individually: true
  exclude:
    - "./**"

functions:
  streamprocessor:
    handler: streamprocessor/streamprocessor.handler
    #module: streamprocessor
    name: ${self:custom.streamprocessor_lambda}
    description: Handles DynamoDB streams
    role: streamProcessorRole
    package:
      include:
        - 'streamprocessor/*.py'
    events:
      - stream:
          type: dynamodb
          batchsize: 1 #bør den være mer?
          startingPostition: LATEST #hva er dette?
          arn:
            Fn::ImportValue: ${self:custom.project}-dynamodb-rawtable-streamarn

#####DENNNE ER BARE FOR TEST######
  insertdb:
    handler: insertdb/insertdb.handler
    name: ${self:custom.insertdb_lambda}
    description: test lambda
    role: testRole
    layers:
      - arn:aws:lambda:eu-central-1:275823250475:layer:Dataplattform-prod-timestamp_random:2
    package:
      include:
        - 'insertdb/*.py'
    environment:
      DATAPLATTFORM_RAW_TABLENAME: ${self:custom.project}

    events:
      - http:
          path: dataplattform_streamtest_ingest/{type}
          method: post
          private: false
#################################


resources:
  Resources:
    streamProcessorRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-StreamProcessorRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          - PolicyName: ${self:custom.project}-dynamodb-stream-processor
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                    - sqs:SendMessage
                  Resource: "*"

#######BARE FOR TEST######
    testRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-TestRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          - PolicyName: ${self:custom.project}-dynamodb-rawtable-writeonly
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - 'Fn::ImportValue': ${self:custom.project}-dynamodb-rawtable-arn

############################

    QuickQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: QuickQueue

    SlowQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: SlowQueue





plugins:
  - serverless-stack-output




