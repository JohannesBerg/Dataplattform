service: dataplattform-ingest

custom:
  stage: ${opt:stage, self:provider.stage}
  project: Dataplattform-${self:custom.stage}
  ingest_lambda: ${self:custom.project}-ingest
  slack_ingest_lambda: ${self:custom.project}-slack_ingest
  github_ingest_lambda: ${self:custom.project}-github_ingest

provider:
  name: aws
  stage: dev
  region: eu-central-1
  runtime: python3.7
  memorySize: 1024
  timeout: 5
  role: arn:aws:iam::275823250475:role/dataplattform_basic_lambda #TODO set up roles using serverless
  apiKeys:
    - name: ${self:custom.project}-ingest-key
    - name: ${self:custom.project}-slack_ingest-apikey
      value: ${ssm:dataplattform_slack_ingest_apikey}
    - name: ${self:custom.project}-github_ingest-apikey
      value: ${ssm:dataplattform_github_ingest_apikey}
    - name: ${self:custom.project}-slack_event_app_ingest-apikey
      value: ${ssm:dataplattform_slack_event_app_ingest_apikey}
    - name: ${self:custom.project}-polling_ingest_apikey
      value: ${ssm:dataplattform_polling_ingest_apikey}
  usagePlan:
    throttle: #TODO decide on some values
      burstLimit: 200
      rateLimit: 50
  tags:
    Project: ${self:custom.project}


package:
  individually: true
  exclude:
    - "./**"

functions:
  ingest:
    handler: ingest/ingest.handler
    name: ${self:custom.ingest_lambda}
    description: Main ingest lambda
    role: ingestRole
    layers:
      - arn:aws:lambda:eu-central-1:275823250475:layer:Dataplattform-prod-timestamp_random:2
    package:
      include:
        - 'ingest/*.py'
    environment:
      DATAPLATTFORM_RAW_TABLENAME: ${self:custom.project}
    events:
      - http:
          path: dataplattform_ingest/{type}
          method: post
          private: true
  slack_ingest:
    handler: slack_ingest/slack_ingest.handler
    name: ${self:custom.slack_ingest_lambda}
    description: Slack webhook endpoint
    layers:
      - arn:aws:lambda:eu-central-1:275823250475:layer:Dataplattform-prod-slack_signature_validator:1
    package:
      include:
        - 'slack_ingest/*.py'
    environment:
      DATAPLATTFORM_SLACK_SECRET: ${ssm:dataplattform_slack_shared_secret}
      DATAPLATTFORM_INGEST_APIKEY: ${ssm:dataplattform_slack_ingest_apikey}
      DATAPLATTFORM_INGEST_URL:
        !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.'
          - ${self:provider.region}
          - '.amazonaws.com/'
          - ${self:custom.stage}
          - '/dataplattform_ingest/SlackType'
    events:
      - http:
          path: slack_ingest
          method: post
          private: false
  github_ingest:
    handler: github_ingest/github_ingest.handler
    name: ${self:custom.github_ingest_lambda}
    description: Github webhook endpoint
    package:
      include:
        - 'github_ingest/*.py'
    environment:
      DATAPLATTFORM_GITHUB_SECRET: ${ssm:dataplattform_github_shared_secret}
      DATAPLATTFORM_INGEST_APIKEY: ${ssm:dataplattform_github_ingest_apikey}
      DATAPLATTFORM_INGEST_URL:
        !Join
        - ''
        - - 'https://'
          - !Ref ApiGatewayRestApi
          - '.execute-api.'
          - ${self:provider.region}
          - '.amazonaws.com/'
          - ${self:custom.stage}
          - '/dataplattform_ingest/GithubType'
    events:
      - http:
          path: github_ingest
          method: post
          private: false

resources:
  Resources:
    ingestRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: sls_${self:custom.project}_IngestRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: sls_${self:custom.project}_dynamodbPutItemPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:PutItem
                  Resource:
                    - 'Fn::ImportValue': ${self:custom.project}-dynamodb-rawtable-arn
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
  Outputs:
    IngestURL:
      Description: "Ingest URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}/dataplattform_ingest/"
      Export:
        Name: ${self:custom.project}-ingest-url
