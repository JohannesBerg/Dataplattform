service: dataplattform-fetch

custom:
  stage: ${opt:stage, self:provider.stage}
  project: Dataplattform-${self:custom.stage}
  get_docs_lambda: ${self:custom.project}-get_docs
  apikeys:
    fetch: ${ssm:dataplattform_${self:custom.stage}_fetch_apikey}
    batch_job: ${ssm:dataplattform_${self:custom.stage}_batch_job_apikey}
  output:
    file: ../integration_tests/fetch.serverless_outputs_${self:custom.stage}.json

provider:
  name: aws
  stage: dev
  region: eu-central-1
  runtime: python3.7
  memorySize: 1024
  timeout: 30
  apiKeys:
    - name: ${self:custom.project}-fetch_apikey
      value: ${self:custom.apikeys.fetch}
    - name: ${self:custom.project}-batch_job-apikey
      value: ${self:custom.apikeys.batch_job}
  usagePlan:
    throttle: #TODO decide on some values
      burstLimit: 200
      rateLimit: 50
  stackTags:
    Project: ${self:custom.project}
  tags:
    Project: ${self:custom.project}


package:
  individually: true
  exclude:
    - "./**"

functions:
  get_docs:
    handler: get_docs/get_docs.handler
    name: ${self:custom.get_docs_lambda}
    description: get_docs Lambda
    role: getDocsRole
    layers:
      - arn:aws:lambda:eu-central-1:275823250475:layer:Dataplattform-prod-timestamp_random:2
    package:
      include:
        - 'get_docs/*.py'
    environment:
      DATAPLATTFORM_RAW_TABLENAME: ${self:custom.project}
    events:
      - http:
          path: get_docs/{type}
          method: get
          private: true
          cors: true

resources:
  Resources:
    getDocsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.project}-GetDocsRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        Policies:
          - PolicyName: ${self:custom.project}-dynamodbReadOnlyPolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:BatchGetItem
                    - dynamodb:DescribeTable
                    - dynamodb:GetItem
                    - dynamodb:Scan
                    - dynamodb:Query
                  Resource:
                    - 'Fn::ImportValue': ${self:custom.project}-dynamodb-rawtable-arn
                - Effect: Allow
                  Action:
                    - "s3:*" #TODO find out which ones we actually need
                  Resource: "*"
  Outputs:
    GetDocsURL:
      Description: "Get_docs URL"
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Ref: ApiGatewayRestApi
            - ".execute-api.${self:provider.region}.amazonaws.com/${self:custom.stage}/get_docs/"
      Export:
        Name: ${self:custom.project}-get-docs-url
    TravisFetchApiKey:
      Description: "Fetch key for automated integration tests"
      Value: ${self:custom.apikeys.fetch}
      Export:
        Name: ${self:custom.project}-fetch-apikey
plugins:
  - serverless-stack-output
